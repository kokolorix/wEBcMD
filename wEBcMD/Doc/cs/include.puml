@startuml
class Log {
    + {static} Trace(message:string, memberName:string, sourceFilePath:string, sourceLineNumber:int) : void
    + {static} Trace(logger:ILogger, message:string, memberName:string, sourceFilePath:string, sourceLineNumber:int) : void
    + {static} Info(logger:ILogger, message:string, memberName:string, sourceFilePath:string, sourceLineNumber:int) : void
    + {static} Warn(logger:ILogger, message:string, memberName:string, sourceFilePath:string, sourceLineNumber:int) : void
    + {static} Error(logger:ILogger, message:string, memberName:string, sourceFilePath:string, sourceLineNumber:int) : void
}
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class FindAdresses <<partial>> {
    + <<partial>> ExecuteCommand() : CommandDTO
}
CommandWrapper <|-- FindAdresses
class GetAdress <<partial>> {
    + <<partial>> ExecuteCommand() : CommandDTO
}
CommandWrapper <|-- GetAdress
class SampleCommand <<partial>> {
    + <<partial>> ExecuteCommand() : CommandDTO
}
CommandWrapper <|-- SampleCommand
class SetAdress <<partial>> {
    + <<partial>> ExecuteCommand() : CommandDTO
}
CommandWrapper <|-- SetAdress
class AdressDTO {
}
class FindAdresses <<partial>> {
    + FindAdresses(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class GetAdress <<partial>> {
    + GetAdress(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class SetAdress <<partial>> {
    + SetAdress(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class AdressTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO <|-- AdressDTO
AdressDTO --> "TypeId" Guid
AdressDTO --> "Name1" String
AdressDTO --> "Name2" String
AdressDTO --> "Adress1" String
AdressDTO --> "Adress2" String
AdressDTO --> "Housenumber" String
AdressDTO --> "City" String
AdressDTO --> "Postcode" String
CommandWrapper <|-- FindAdresses
FindAdresses --> "TypeId" Guid
FindAdresses --> "Cmd" CommandDTO
FindAdresses --> "SearchText" String
FindAdresses --> "Result<AdressDTO>" "List`1"
CommandWrapper <|-- GetAdress
GetAdress --> "TypeId" Guid
GetAdress --> "Cmd" CommandDTO
GetAdress --> "Id" Guid
GetAdress --> "Result" AdressDTO
CommandWrapper <|-- SetAdress
SetAdress --> "TypeId" Guid
SetAdress --> "Cmd" CommandDTO
SetAdress --> "Id" Guid
SetAdress --> "Adress" AdressDTO
SetAdress --> "Result" AdressDTO
class BaseDTO <<partial>> {
    # StringFromPropertyList(list:List<PropertyDTO>, name:string) : string
    # StringToPropertyList(list:List<PropertyDTO>, name:string, newValue:string) : void
    # BooleanFromPropertyList(list:List<PropertyDTO>, name:string) : Boolean
    # BooleanToPropertyList(list:List<PropertyDTO>, name:string, newValue:Boolean) : void
}
class BaseDTO <<partial>> {
}
class PropertyDTO {
}
class ObjectDTO {
}
class TypeDTO {
}
class BaseTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO --> "TypeId" Guid
BaseDTO --> "Id" Guid
BaseDTO --> "Type" Guid
PropertyDTO --> "TypeId" Guid
PropertyDTO --> "Name" String
PropertyDTO --> "Value" String
BaseDTO <|-- ObjectDTO
ObjectDTO --> "TypeId" Guid
ObjectDTO --> "Properties<PropertyDTO>" "List`1"
BaseDTO <|-- TypeDTO
TypeDTO --> "TypeId" Guid
class ObjectWrapper {
    + ObjectWrapper(dto:ObjectDTO)
}
class CommandWrapper {
    + CommandWrapper(dto:CommandDTO)
    # Get(cmd:CommandDTO, name:string, target:(Func<T> get, Action<T> set)) : void
    # Get(cmd:CommandDTO, name:string, target:(Func<Guid> get, Action<Guid> set)) : void
    # Set(cmd:CommandDTO, name:string, value:T) : void
}
ObjectWrapper --> "_dto" ObjectDTO
CommandWrapper --> "Cmd" CommandDTO
class CommandDTO {
}
class SampleCommand <<partial>> {
    + SampleCommand(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class CommandTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO <|-- CommandDTO
CommandDTO --> "TypeId" Guid
CommandDTO o-> "Response" Boolean
CommandDTO o-> "Arguments<PropertyDTO>" "List`1"
CommandWrapper <|-- SampleCommand
SampleCommand --> "TypeId" Guid
SampleCommand --> "Cmd" CommandDTO
SampleCommand --> "FirstOne" String
SampleCommand --> "SecondOne" Boolean
class WeatherForecast {
    + TemperatureC : int <<get>> <<set>>
    + TemperatureF : int <<get>>
    + Summary : string <<get>> <<set>>
}
WeatherForecast --> "Date" DateTime
@enduml
