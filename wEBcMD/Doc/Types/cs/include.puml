@startuml
class AdressDTO {
}
class FindAdressesWrapper <<partial>> {
    + FindAdressesWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class GetAdressWrapper <<partial>> {
    + GetAdressWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class SetAdressWrapper <<partial>> {
    + SetAdressWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class DeleteAdressWrapper <<partial>> {
    + DeleteAdressWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class AdressTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO <|-- AdressDTO
AdressDTO --> "TypeId" Guid
AdressDTO --> "Name1" String
AdressDTO --> "Name2" String
AdressDTO --> "Adress1" String
AdressDTO --> "Adress2" String
AdressDTO --> "Housenumber" String
AdressDTO --> "City" String
AdressDTO --> "Postcode" String
CommandWrapper <|-- FindAdressesWrapper
FindAdressesWrapper --> "TypeId" Guid
FindAdressesWrapper --> "Cmd" CommandDTO
FindAdressesWrapper --> "SearchText" String
FindAdressesWrapper --> "Result<AdressDTO>" "List`1"
CommandWrapper <|-- GetAdressWrapper
GetAdressWrapper --> "TypeId" Guid
GetAdressWrapper --> "Cmd" CommandDTO
GetAdressWrapper --> "Id" Guid
GetAdressWrapper --> "Result" AdressDTO
CommandWrapper <|-- SetAdressWrapper
SetAdressWrapper --> "TypeId" Guid
SetAdressWrapper --> "Cmd" CommandDTO
SetAdressWrapper --> "Id" Guid
SetAdressWrapper --> "Adress" AdressDTO
SetAdressWrapper --> "Result" AdressDTO
CommandWrapper <|-- DeleteAdressWrapper
DeleteAdressWrapper --> "TypeId" Guid
DeleteAdressWrapper --> "Cmd" CommandDTO
DeleteAdressWrapper --> "Id" Guid
DeleteAdressWrapper --> "Result" AdressDTO
class BaseDTO <<partial>> {
    # StringFromPropertyList(list:List<PropertyDTO>, name:string) : string
    # StringToPropertyList(list:List<PropertyDTO>, name:string, newValue:string) : void
    # BooleanFromPropertyList(list:List<PropertyDTO>, name:string) : Boolean
    # BooleanToPropertyList(list:List<PropertyDTO>, name:string, newValue:Boolean) : void
}
class BaseDTO <<partial>> {
}
class PropertyDTO {
}
class ObjectDTO {
}
class TypeDTO {
}
class BaseTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO --> "TypeId" Guid
BaseDTO --> "Id" Guid
BaseDTO --> "Type" Guid
PropertyDTO --> "TypeId" Guid
PropertyDTO --> "Name" String
PropertyDTO --> "Value" String
BaseDTO <|-- ObjectDTO
ObjectDTO --> "TypeId" Guid
ObjectDTO --> "Properties<PropertyDTO>" "List`1"
BaseDTO <|-- TypeDTO
TypeDTO --> "TypeId" Guid
class ObjectWrapper {
    + ObjectWrapper(dto:ObjectDTO)
}
class CommandWrapper {
    + CommandWrapper(dto:CommandDTO)
    # Get(cmd:CommandDTO, name:string, target:(Func<T> get, Action<T> set)) : void
    # Get(cmd:CommandDTO, name:string, target:(Func<Guid> get, Action<Guid> set)) : void
    # Set(cmd:CommandDTO, name:string, value:T) : void
}
ObjectWrapper --> "_dto" ObjectDTO
CommandWrapper --> "Cmd" CommandDTO
class CommandDTO {
}
class SampleCommandWrapper <<partial>> {
    + SampleCommandWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> ExecuteCommand() : CommandDTO
}
class CommandTypesDispatcher <<static>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class "List`1"<T> {
}
BaseDTO <|-- CommandDTO
CommandDTO --> "TypeId" Guid
CommandDTO o-> "Response" Boolean
CommandDTO o-> "Arguments<PropertyDTO>" "List`1"
CommandWrapper <|-- SampleCommandWrapper
SampleCommandWrapper --> "TypeId" Guid
SampleCommandWrapper --> "Cmd" CommandDTO
SampleCommandWrapper --> "FirstOne" String
SampleCommandWrapper --> "SecondOne" Boolean
class WeatherForecast {
    + TemperatureC : int <<get>> <<set>>
    + TemperatureF : int <<get>>
    + Summary : string <<get>> <<set>>
}
WeatherForecast --> "Date" DateTime
@enduml
