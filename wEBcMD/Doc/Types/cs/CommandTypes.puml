@startuml
class CommandDTO {
}
class ParamDTO {
}
class CommandTypeDTO {
}
class GetCommandTypesWrapper <<partial>> {
    + GetCommandTypesWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> GetCommandTypes() : List<CommandTypeDTO>
}
class SampleCommandWrapper <<partial>> {
    + SampleCommandWrapper(dto:CommandDTO)
    + {static} IsForMe(dto:CommandDTO) : bool
    + {static} ExecuteCommand(dto:CommandDTO) : CommandDTO
    + <<partial>> SampleCommand(firstOne:String, secondOne:Boolean) : void
}
class CommandTypes <<static>> <<partial>> {
    + {static} Dispatch(dto:CommandDTO) : CommandDTO
}
class CommandTypes <<static>> <<partial>> {
    + {static} GetTypes(commandTypes:List<CommandTypeDTO>) : void
}
class "List`1"<T> {
}
BaseDTO <|-- CommandDTO
CommandDTO --> "TypeId" Guid
CommandDTO o-> "Response" Boolean
CommandDTO o-> "Arguments<PropertyDTO>" "List`1"
ParamDTO --> "TypeId" Guid
ParamDTO --> "Name" String
ParamDTO --> "Type" String
TypeDTO <|-- CommandTypeDTO
CommandTypeDTO --> "TypeId" Guid
CommandTypeDTO --> "Result" String
CommandTypeDTO --> "Parameters<ParamDTO>" "List`1"
CommandWrapper <|-- GetCommandTypesWrapper
GetCommandTypesWrapper --> "TypeId" Guid
GetCommandTypesWrapper --> "Cmd" CommandDTO
GetCommandTypesWrapper --> "Result<CommandTypeDTO>" "List`1"
CommandWrapper <|-- SampleCommandWrapper
SampleCommandWrapper --> "TypeId" Guid
SampleCommandWrapper --> "Cmd" CommandDTO
SampleCommandWrapper --> "FirstOne" String
SampleCommandWrapper --> "SecondOne" Boolean
@enduml
