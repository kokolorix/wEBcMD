@startuml
class PropertyTypeDTO {
    +Name?: string
    +Type?: string
    +{static} TypeId: Guid
}
class BaseDTO {
    +Id?: string
    +Type?: string
    +{static} TypeId: Guid
}
class TypeDTO extends BaseDTO {
    +Name?: string
    +{static} TypeId: Guid
}
class ObjectTypeDTO extends TypeDTO {
    +PropertyTypes?: PropertyTypeDTO[]
    +{static} TypeId: Guid
}
class CommandWrapper {
    -_dto: any
    -_service: any
    +Service: any
    +DTO: any
    +Response: boolean
    +Arguments: any[]
    +Type: Guid
    +Id: Guid
    +getArgument(name: string): any
    +setArgument(name: string, value: string): void
    +executeCmd(): Promise<any>
    -{static} _factories: any
    +{static} register(typeId: Guid, factory: CommandWrapperFactory): void
}
class PropertyDTO {
    +Name?: string
    +Value?: string
    +{static} TypeId: Guid
}
class CommandDTO extends BaseDTO {
    +Response?: boolean
    +Arguments?: PropertyDTO[]
    +{static} TypeId: Guid
}
class GetObjectTypesBase extends CommandWrapper {
    +Result: ObjectTypeDTO[]
    +execute(): Promise<ObjectTypeDTO[]>
    +{static} TypeId: Guid
    +{static} IsForMe(dto: CommandDTO): any
}
ObjectTypeDTO --> "*" PropertyTypeDTO
CommandDTO --> "*" PropertyDTO
GetObjectTypesBase --> "*" ObjectTypeDTO
GetObjectTypesBase --> "1" CommandDTO
@enduml